require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DinnerEventsController do
  login :admin

  let(:dinner_event) { FactoryGirl.create :dinner_event }
  let(:event) { dinner_event.event }

  describe "GET show" do
    it "assigns the requested dinner_event as @dinner_event" do
      get :show, params: { :event_id => event.to_param }
      expect(assigns(:dinner_event)).to eq(dinner_event)
    end
  end

  describe "GET new" do
    it "assigns a new dinner_event as @dinner_event" do
      get :new, params: { :event_id => event.to_param }
      expect(assigns(:dinner_event)).to be_a_new(DinnerEvent)
    end
  end

  describe "GET edit" do
    it "assigns the requested dinner_event as @dinner_event" do
      get :edit, params: { :event_id => event.to_param }
      expect(assigns(:dinner_event)).to eq(dinner_event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new DinnerEvent" do
        event = create :event
        expect {
          post :create, params: {
            :event_id => event.to_param,
            :dinner_event => attributes_for(:dinner_event)
          }
        }.to change(DinnerEvent, :count).by(1)
      end

      it "assigns a newly created dinner_event as @dinner_event" do
        event = create :event
        post :create, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:dinner_event)
        }
        expect(assigns(:dinner_event)).to be_a(DinnerEvent)
        expect(assigns(:dinner_event)).to be_persisted
      end

      it "redirects to the created dinner_event" do
        post :create, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:dinner_event)
        }
        expect(response).to redirect_to(event_dinner_path(event))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved dinner_event as @dinner_event" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(DinnerEvent).to receive(:save).and_return(false)
        post :create, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:invalid_dinner_event)
        }
        expect(assigns(:dinner_event)).to be_a_new(DinnerEvent)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(DinnerEvent).to receive(:save).and_return(false)
        post :create, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:invalid_dinner_event)
        }
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested dinner_event" do
        put :update, params: {
          :event_id => event.to_param,
          :dinner_event => { "venue" => "MyString" }
        }
        event.reload
        expect(event.dinner).not_to be_nil
        expect(event.dinner.venue).to eq "MyString"
      end

      it "assigns the requested dinner_event as @dinner_event" do
        put :update, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:dinner_event)
        }
        expect(assigns(:dinner_event)).to eq(dinner_event)
      end

      it "redirects to the dinner_event" do
        put :update, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:dinner_event)
        }
        expect(response).to redirect_to(event_dinner_path(event))
      end
    end

    describe "with invalid params" do
      it "assigns the dinner_event as @dinner_event" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(DinnerEvent).to receive(:save).and_return(false)
        put :update, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:invalid_dinner_event)
        }
        expect(assigns(:dinner_event)).to eq(dinner_event)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(DinnerEvent).to receive(:save).and_return(false)
        put :update, params: {
          :event_id => event.to_param,
          :dinner_event => attributes_for(:invalid_dinner_event)
        }
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested dinner_event" do
      dinner = create :dinner_event
      expect {
        delete :destroy, params: { :event_id => dinner.event.to_param }
      }.to change(DinnerEvent, :count).by(-1)
    end

    it "redirects to the dinner_events list" do
      delete :destroy, params: { :id => dinner_event.to_param, :event_id => event.to_param }
      expect(response).to redirect_to(event_dinner_path(event))
    end
  end

end
