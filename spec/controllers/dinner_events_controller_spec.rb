require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DinnerEventsController do
  login :admin
  
  # This should return the minimal set of attributes required to create a valid
  # DinnerEvent. As you add validations to DinnerEvent, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:dinner_event).merge(event_id: FactoryGirl.create(:event).id)
  end

  def invalid_attributes
    FactoryGirl.attributes_for(:invalid_dinner_event)
  end

  describe "GET index" do
    it "assigns all dinner_events as @dinner_events" do
      dinner_event = DinnerEvent.create! valid_attributes
      get :index
      assigns(:dinner_events).should eq([dinner_event])
    end
  end

  describe "GET show" do
    it "assigns the requested dinner_event as @dinner_event" do
      dinner_event = DinnerEvent.create! valid_attributes
      get :show, {:id => dinner_event.to_param}
      assigns(:dinner_event).should eq(dinner_event)
    end
  end

  describe "GET new" do
    it "assigns a new dinner_event as @dinner_event" do
      get :new, {}
      assigns(:dinner_event).should be_a_new(DinnerEvent)
    end
  end

  describe "GET edit" do
    it "assigns the requested dinner_event as @dinner_event" do
      dinner_event = DinnerEvent.create! valid_attributes
      get :edit, {:id => dinner_event.to_param}
      assigns(:dinner_event).should eq(dinner_event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new DinnerEvent" do
        expect {
          post :create, {:dinner_event => valid_attributes}
        }.to change(DinnerEvent, :count).by(1)
      end

      it "assigns a newly created dinner_event as @dinner_event" do
        post :create, {:dinner_event => valid_attributes}
        assigns(:dinner_event).should be_a(DinnerEvent)
        assigns(:dinner_event).should be_persisted
      end

      it "redirects to the created dinner_event" do
        post :create, {:dinner_event => valid_attributes}
        response.should redirect_to(DinnerEvent.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved dinner_event as @dinner_event" do
        # Trigger the behavior that occurs when invalid params are submitted
        DinnerEvent.any_instance.stub(:save).and_return(false)
        post :create, {:dinner_event => invalid_attributes}
        assigns(:dinner_event).should be_a_new(DinnerEvent)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        DinnerEvent.any_instance.stub(:save).and_return(false)
        post :create, {:dinner_event => invalid_attributes}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested dinner_event" do
        dinner_event = DinnerEvent.create! valid_attributes
        # Assuming there are no other dinner_events in the database, this
        # specifies that the DinnerEvent created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        DinnerEvent.any_instance.should_receive(:update_attributes).with({ "venue" => "MyString" })
        put :update, {:id => dinner_event.to_param, :dinner_event => { "venue" => "MyString" }}
      end

      it "assigns the requested dinner_event as @dinner_event" do
        dinner_event = DinnerEvent.create! valid_attributes
        put :update, {:id => dinner_event.to_param, :dinner_event => valid_attributes}
        assigns(:dinner_event).should eq(dinner_event)
      end

      it "redirects to the dinner_event" do
        dinner_event = DinnerEvent.create! valid_attributes
        put :update, {:id => dinner_event.to_param, :dinner_event => valid_attributes}
        response.should redirect_to(dinner_event)
      end
    end

    describe "with invalid params" do
      it "assigns the dinner_event as @dinner_event" do
        dinner_event = DinnerEvent.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        DinnerEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => dinner_event.to_param, :dinner_event => invalid_attributes}
        assigns(:dinner_event).should eq(dinner_event)
      end

      it "re-renders the 'edit' template" do
        dinner_event = DinnerEvent.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        DinnerEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => dinner_event.to_param, :dinner_event => invalid_attributes}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested dinner_event" do
      dinner_event = DinnerEvent.create! valid_attributes
      expect {
        delete :destroy, {:id => dinner_event.to_param}
      }.to change(DinnerEvent, :count).by(-1)
    end

    it "redirects to the dinner_events list" do
      dinner_event = DinnerEvent.create! valid_attributes
      delete :destroy, {:id => dinner_event.to_param}
      response.should redirect_to(dinner_events_url)
    end
  end

end
